-- File auto generated by purescript-bridge! --
module Shared where

import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Array, Boolean, Int, String)

import Prelude

data Rank =
    R2
  | R3
  | R4
  | R5
  | R6
  | R7
  | R8
  | R9
  | RT
  | RJ
  | RQ
  | RK
  | RA

derive instance genericRank :: Generic Rank _

--------------------------------------------------------------------------------
_R2 :: Prism' Rank Unit
_R2 = prism' (\_ -> R2) f
  where
    f R2 = Just unit
    f _ = Nothing

_R3 :: Prism' Rank Unit
_R3 = prism' (\_ -> R3) f
  where
    f R3 = Just unit
    f _ = Nothing

_R4 :: Prism' Rank Unit
_R4 = prism' (\_ -> R4) f
  where
    f R4 = Just unit
    f _ = Nothing

_R5 :: Prism' Rank Unit
_R5 = prism' (\_ -> R5) f
  where
    f R5 = Just unit
    f _ = Nothing

_R6 :: Prism' Rank Unit
_R6 = prism' (\_ -> R6) f
  where
    f R6 = Just unit
    f _ = Nothing

_R7 :: Prism' Rank Unit
_R7 = prism' (\_ -> R7) f
  where
    f R7 = Just unit
    f _ = Nothing

_R8 :: Prism' Rank Unit
_R8 = prism' (\_ -> R8) f
  where
    f R8 = Just unit
    f _ = Nothing

_R9 :: Prism' Rank Unit
_R9 = prism' (\_ -> R9) f
  where
    f R9 = Just unit
    f _ = Nothing

_RT :: Prism' Rank Unit
_RT = prism' (\_ -> RT) f
  where
    f RT = Just unit
    f _ = Nothing

_RJ :: Prism' Rank Unit
_RJ = prism' (\_ -> RJ) f
  where
    f RJ = Just unit
    f _ = Nothing

_RQ :: Prism' Rank Unit
_RQ = prism' (\_ -> RQ) f
  where
    f RQ = Just unit
    f _ = Nothing

_RK :: Prism' Rank Unit
_RK = prism' (\_ -> RK) f
  where
    f RK = Just unit
    f _ = Nothing

_RA :: Prism' Rank Unit
_RA = prism' (\_ -> RA) f
  where
    f RA = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data Suit =
    Clubs
  | Diamonds
  | Hearts
  | Spades

derive instance genericSuit :: Generic Suit _

--------------------------------------------------------------------------------
_Clubs :: Prism' Suit Unit
_Clubs = prism' (\_ -> Clubs) f
  where
    f Clubs = Just unit
    f _ = Nothing

_Diamonds :: Prism' Suit Unit
_Diamonds = prism' (\_ -> Diamonds) f
  where
    f Diamonds = Just unit
    f _ = Nothing

_Hearts :: Prism' Suit Unit
_Hearts = prism' (\_ -> Hearts) f
  where
    f Hearts = Just unit
    f _ = Nothing

_Spades :: Prism' Suit Unit
_Spades = prism' (\_ -> Spades) f
  where
    f Spades = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
newtype Card =
    Card {
      _cRank :: Rank
    , _cSuit :: Suit
    }

derive instance genericCard :: Generic Card _
derive instance newtypeCard :: Newtype Card _

--------------------------------------------------------------------------------
_Card :: Iso' Card { _cRank :: Rank, _cSuit :: Suit}
_Card = _Newtype

cRank :: Lens' Card Rank
cRank = _Newtype <<< prop (SProxy :: SProxy "_cRank")

cSuit :: Lens' Card Suit
cSuit = _Newtype <<< prop (SProxy :: SProxy "_cSuit")

--------------------------------------------------------------------------------
data Bid =
    HighCard Rank
  | OnePair Rank
  | TwoPair Rank Rank
  | ThreeOfAKind Rank

derive instance genericBid :: Generic Bid _

--------------------------------------------------------------------------------
_HighCard :: Prism' Bid Rank
_HighCard = prism' HighCard f
  where
    f (HighCard a) = Just $ a
    f _ = Nothing

_OnePair :: Prism' Bid Rank
_OnePair = prism' OnePair f
  where
    f (OnePair a) = Just $ a
    f _ = Nothing

_TwoPair :: Prism' Bid { a :: Rank, b :: Rank }
_TwoPair = prism' (\{ a, b } -> TwoPair a b) f
  where
    f (TwoPair a b) = Just $ { a: a, b: b }
    f _ = Nothing

_ThreeOfAKind :: Prism' Bid Rank
_ThreeOfAKind = prism' ThreeOfAKind f
  where
    f (ThreeOfAKind a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
newtype Unique =
    Unique String

derive instance genericUnique :: Generic Unique _
derive instance newtypeUnique :: Newtype Unique _

--------------------------------------------------------------------------------
_Unique :: Iso' Unique String
_Unique = _Newtype
--------------------------------------------------------------------------------
newtype Player =
    Player {
      _pUserID :: Unique
    , _pUserName :: String
    , _pSeat :: Maybe Int
    , _pCards :: Int
    , _pHand :: Array Card
    , _pPlaying :: Boolean
    }

derive instance genericPlayer :: Generic Player _
derive instance newtypePlayer :: Newtype Player _

--------------------------------------------------------------------------------
_Player :: Iso' Player { _pUserID :: Unique, _pUserName :: String, _pSeat :: Maybe Int, _pCards :: Int, _pHand :: Array Card, _pPlaying :: Boolean}
_Player = _Newtype

pUserID :: Lens' Player Unique
pUserID = _Newtype <<< prop (SProxy :: SProxy "_pUserID")

pUserName :: Lens' Player String
pUserName = _Newtype <<< prop (SProxy :: SProxy "_pUserName")

pSeat :: Lens' Player (Maybe Int)
pSeat = _Newtype <<< prop (SProxy :: SProxy "_pSeat")

pCards :: Lens' Player Int
pCards = _Newtype <<< prop (SProxy :: SProxy "_pCards")

pHand :: Lens' Player (Array Card)
pHand = _Newtype <<< prop (SProxy :: SProxy "_pHand")

pPlaying :: Lens' Player Boolean
pPlaying = _Newtype <<< prop (SProxy :: SProxy "_pPlaying")

--------------------------------------------------------------------------------
newtype RoomData =
    RoomData {
      _rdPlayers :: Array Player
    }

derive instance genericRoomData :: Generic RoomData _
derive instance newtypeRoomData :: Newtype RoomData _

--------------------------------------------------------------------------------
_RoomData :: Iso' RoomData { _rdPlayers :: Array Player}
_RoomData = _Newtype

rdPlayers :: Lens' RoomData (Array Player)
rdPlayers = _Newtype <<< prop (SProxy :: SProxy "_rdPlayers")

--------------------------------------------------------------------------------
data ClientMsg =
    CJoin String
  | CCreateRoom
  | CLeave
  | CSit Int
  | CSay String
  | CRaise Int
  | CCall
  | CFold

derive instance genericClientMsg :: Generic ClientMsg _

--------------------------------------------------------------------------------
_CJoin :: Prism' ClientMsg String
_CJoin = prism' CJoin f
  where
    f (CJoin a) = Just $ a
    f _ = Nothing

_CCreateRoom :: Prism' ClientMsg Unit
_CCreateRoom = prism' (\_ -> CCreateRoom) f
  where
    f CCreateRoom = Just unit
    f _ = Nothing

_CLeave :: Prism' ClientMsg Unit
_CLeave = prism' (\_ -> CLeave) f
  where
    f CLeave = Just unit
    f _ = Nothing

_CSit :: Prism' ClientMsg Int
_CSit = prism' CSit f
  where
    f (CSit a) = Just $ a
    f _ = Nothing

_CSay :: Prism' ClientMsg String
_CSay = prism' CSay f
  where
    f (CSay a) = Just $ a
    f _ = Nothing

_CRaise :: Prism' ClientMsg Int
_CRaise = prism' CRaise f
  where
    f (CRaise a) = Just $ a
    f _ = Nothing

_CCall :: Prism' ClientMsg Unit
_CCall = prism' (\_ -> CCall) f
  where
    f CCall = Just unit
    f _ = Nothing

_CFold :: Prism' ClientMsg Unit
_CFold = prism' (\_ -> CFold) f
  where
    f CFold = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data ServerMsg =
    SRoomData RoomData
  | SJoin Player
  | SSay Unique String
  | SLeave Unique
  | SSit Unique Int
  | SRaise Unique Int
  | SCall Unique
  | SFold Unique
  | SDrawCards
  | SRoomCreated Unique

derive instance genericServerMsg :: Generic ServerMsg _

--------------------------------------------------------------------------------
_SRoomData :: Prism' ServerMsg RoomData
_SRoomData = prism' SRoomData f
  where
    f (SRoomData a) = Just $ a
    f _ = Nothing

_SJoin :: Prism' ServerMsg Player
_SJoin = prism' SJoin f
  where
    f (SJoin a) = Just $ a
    f _ = Nothing

_SSay :: Prism' ServerMsg { a :: Unique, b :: String }
_SSay = prism' (\{ a, b } -> SSay a b) f
  where
    f (SSay a b) = Just $ { a: a, b: b }
    f _ = Nothing

_SLeave :: Prism' ServerMsg Unique
_SLeave = prism' SLeave f
  where
    f (SLeave a) = Just $ a
    f _ = Nothing

_SSit :: Prism' ServerMsg { a :: Unique, b :: Int }
_SSit = prism' (\{ a, b } -> SSit a b) f
  where
    f (SSit a b) = Just $ { a: a, b: b }
    f _ = Nothing

_SRaise :: Prism' ServerMsg { a :: Unique, b :: Int }
_SRaise = prism' (\{ a, b } -> SRaise a b) f
  where
    f (SRaise a b) = Just $ { a: a, b: b }
    f _ = Nothing

_SCall :: Prism' ServerMsg Unique
_SCall = prism' SCall f
  where
    f (SCall a) = Just $ a
    f _ = Nothing

_SFold :: Prism' ServerMsg Unique
_SFold = prism' SFold f
  where
    f (SFold a) = Just $ a
    f _ = Nothing

_SDrawCards :: Prism' ServerMsg Unit
_SDrawCards = prism' (\_ -> SDrawCards) f
  where
    f SDrawCards = Just unit
    f _ = Nothing

_SRoomCreated :: Prism' ServerMsg Unique
_SRoomCreated = prism' SRoomCreated f
  where
    f (SRoomCreated a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
